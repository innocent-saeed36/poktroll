// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pocket/supplier/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/pokt-network/poktroll/x/shared/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ddacf5456729a55, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ddacf5456729a55, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetSupplierRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetSupplierRequest) Reset()         { *m = QueryGetSupplierRequest{} }
func (m *QueryGetSupplierRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSupplierRequest) ProtoMessage()    {}
func (*QueryGetSupplierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ddacf5456729a55, []int{2}
}
func (m *QueryGetSupplierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSupplierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSupplierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSupplierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSupplierRequest.Merge(m, src)
}
func (m *QueryGetSupplierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSupplierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSupplierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSupplierRequest proto.InternalMessageInfo

func (m *QueryGetSupplierRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetSupplierResponse struct {
	Supplier types.Supplier `protobuf:"bytes,1,opt,name=supplier,proto3" json:"supplier"`
}

func (m *QueryGetSupplierResponse) Reset()         { *m = QueryGetSupplierResponse{} }
func (m *QueryGetSupplierResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSupplierResponse) ProtoMessage()    {}
func (*QueryGetSupplierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ddacf5456729a55, []int{3}
}
func (m *QueryGetSupplierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSupplierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSupplierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSupplierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSupplierResponse.Merge(m, src)
}
func (m *QueryGetSupplierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSupplierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSupplierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSupplierResponse proto.InternalMessageInfo

func (m *QueryGetSupplierResponse) GetSupplier() types.Supplier {
	if m != nil {
		return m.Supplier
	}
	return types.Supplier{}
}

type QueryAllSupplierRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSupplierRequest) Reset()         { *m = QueryAllSupplierRequest{} }
func (m *QueryAllSupplierRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSupplierRequest) ProtoMessage()    {}
func (*QueryAllSupplierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ddacf5456729a55, []int{4}
}
func (m *QueryAllSupplierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSupplierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSupplierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSupplierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSupplierRequest.Merge(m, src)
}
func (m *QueryAllSupplierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSupplierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSupplierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSupplierRequest proto.InternalMessageInfo

func (m *QueryAllSupplierRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSupplierResponse struct {
	Supplier   []types.Supplier    `protobuf:"bytes,1,rep,name=supplier,proto3" json:"supplier"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSupplierResponse) Reset()         { *m = QueryAllSupplierResponse{} }
func (m *QueryAllSupplierResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSupplierResponse) ProtoMessage()    {}
func (*QueryAllSupplierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ddacf5456729a55, []int{5}
}
func (m *QueryAllSupplierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSupplierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSupplierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSupplierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSupplierResponse.Merge(m, src)
}
func (m *QueryAllSupplierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSupplierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSupplierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSupplierResponse proto.InternalMessageInfo

func (m *QueryAllSupplierResponse) GetSupplier() []types.Supplier {
	if m != nil {
		return m.Supplier
	}
	return nil
}

func (m *QueryAllSupplierResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetClaimRequest struct {
	SessionId       string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SupplierAddress string `protobuf:"bytes,2,opt,name=supplier_address,json=supplierAddress,proto3" json:"supplier_address,omitempty"`
}

func (m *QueryGetClaimRequest) Reset()         { *m = QueryGetClaimRequest{} }
func (m *QueryGetClaimRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetClaimRequest) ProtoMessage()    {}
func (*QueryGetClaimRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ddacf5456729a55, []int{6}
}
func (m *QueryGetClaimRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClaimRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClaimRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClaimRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClaimRequest.Merge(m, src)
}
func (m *QueryGetClaimRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClaimRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClaimRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClaimRequest proto.InternalMessageInfo

func (m *QueryGetClaimRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *QueryGetClaimRequest) GetSupplierAddress() string {
	if m != nil {
		return m.SupplierAddress
	}
	return ""
}

type QueryGetClaimResponse struct {
	Claim Claim `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim"`
}

func (m *QueryGetClaimResponse) Reset()         { *m = QueryGetClaimResponse{} }
func (m *QueryGetClaimResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetClaimResponse) ProtoMessage()    {}
func (*QueryGetClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ddacf5456729a55, []int{7}
}
func (m *QueryGetClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClaimResponse.Merge(m, src)
}
func (m *QueryGetClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClaimResponse proto.InternalMessageInfo

func (m *QueryGetClaimResponse) GetClaim() Claim {
	if m != nil {
		return m.Claim
	}
	return Claim{}
}

type QueryAllClaimsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Types that are valid to be assigned to Filter:
	//	*QueryAllClaimsRequest_SupplierAddress
	//	*QueryAllClaimsRequest_SessionId
	//	*QueryAllClaimsRequest_SessionEndHeight
	Filter isQueryAllClaimsRequest_Filter `protobuf_oneof:"filter"`
}

func (m *QueryAllClaimsRequest) Reset()         { *m = QueryAllClaimsRequest{} }
func (m *QueryAllClaimsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllClaimsRequest) ProtoMessage()    {}
func (*QueryAllClaimsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ddacf5456729a55, []int{8}
}
func (m *QueryAllClaimsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClaimsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClaimsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClaimsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClaimsRequest.Merge(m, src)
}
func (m *QueryAllClaimsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClaimsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClaimsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClaimsRequest proto.InternalMessageInfo

type isQueryAllClaimsRequest_Filter interface {
	isQueryAllClaimsRequest_Filter()
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueryAllClaimsRequest_SupplierAddress struct {
	SupplierAddress string `protobuf:"bytes,2,opt,name=supplier_address,json=supplierAddress,proto3,oneof" json:"supplier_address,omitempty"`
}
type QueryAllClaimsRequest_SessionId struct {
	SessionId string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3,oneof" json:"session_id,omitempty"`
}
type QueryAllClaimsRequest_SessionEndHeight struct {
	SessionEndHeight uint64 `protobuf:"varint,4,opt,name=session_end_height,json=sessionEndHeight,proto3,oneof" json:"session_end_height,omitempty"`
}

func (*QueryAllClaimsRequest_SupplierAddress) isQueryAllClaimsRequest_Filter()  {}
func (*QueryAllClaimsRequest_SessionId) isQueryAllClaimsRequest_Filter()        {}
func (*QueryAllClaimsRequest_SessionEndHeight) isQueryAllClaimsRequest_Filter() {}

func (m *QueryAllClaimsRequest) GetFilter() isQueryAllClaimsRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *QueryAllClaimsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllClaimsRequest) GetSupplierAddress() string {
	if x, ok := m.GetFilter().(*QueryAllClaimsRequest_SupplierAddress); ok {
		return x.SupplierAddress
	}
	return ""
}

func (m *QueryAllClaimsRequest) GetSessionId() string {
	if x, ok := m.GetFilter().(*QueryAllClaimsRequest_SessionId); ok {
		return x.SessionId
	}
	return ""
}

func (m *QueryAllClaimsRequest) GetSessionEndHeight() uint64 {
	if x, ok := m.GetFilter().(*QueryAllClaimsRequest_SessionEndHeight); ok {
		return x.SessionEndHeight
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryAllClaimsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryAllClaimsRequest_SupplierAddress)(nil),
		(*QueryAllClaimsRequest_SessionId)(nil),
		(*QueryAllClaimsRequest_SessionEndHeight)(nil),
	}
}

type QueryAllClaimsResponse struct {
	// TODO_IMPROVE: Rename to `Claims` (plural).
	Claim      []Claim             `protobuf:"bytes,1,rep,name=claim,proto3" json:"claim"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllClaimsResponse) Reset()         { *m = QueryAllClaimsResponse{} }
func (m *QueryAllClaimsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllClaimsResponse) ProtoMessage()    {}
func (*QueryAllClaimsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ddacf5456729a55, []int{9}
}
func (m *QueryAllClaimsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClaimsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClaimsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClaimsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClaimsResponse.Merge(m, src)
}
func (m *QueryAllClaimsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClaimsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClaimsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClaimsResponse proto.InternalMessageInfo

func (m *QueryAllClaimsResponse) GetClaim() []Claim {
	if m != nil {
		return m.Claim
	}
	return nil
}

func (m *QueryAllClaimsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetProofRequest struct {
	SessionId       string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SupplierAddress string `protobuf:"bytes,2,opt,name=supplier_address,json=supplierAddress,proto3" json:"supplier_address,omitempty"`
}

func (m *QueryGetProofRequest) Reset()         { *m = QueryGetProofRequest{} }
func (m *QueryGetProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProofRequest) ProtoMessage()    {}
func (*QueryGetProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ddacf5456729a55, []int{10}
}
func (m *QueryGetProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProofRequest.Merge(m, src)
}
func (m *QueryGetProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProofRequest proto.InternalMessageInfo

func (m *QueryGetProofRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *QueryGetProofRequest) GetSupplierAddress() string {
	if m != nil {
		return m.SupplierAddress
	}
	return ""
}

type QueryGetProofResponse struct {
	Proof Proof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof"`
}

func (m *QueryGetProofResponse) Reset()         { *m = QueryGetProofResponse{} }
func (m *QueryGetProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProofResponse) ProtoMessage()    {}
func (*QueryGetProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ddacf5456729a55, []int{11}
}
func (m *QueryGetProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProofResponse.Merge(m, src)
}
func (m *QueryGetProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProofResponse proto.InternalMessageInfo

func (m *QueryGetProofResponse) GetProof() Proof {
	if m != nil {
		return m.Proof
	}
	return Proof{}
}

type QueryAllProofsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Types that are valid to be assigned to Filter:
	//
	//	*QueryAllProofsRequest_SupplierAddress
	//	*QueryAllProofsRequest_SessionId
	//	*QueryAllProofsRequest_SessionEndHeight
	Filter isQueryAllProofsRequest_Filter `protobuf_oneof:"filter"`
}

func (m *QueryAllProofsRequest) Reset()         { *m = QueryAllProofsRequest{} }
func (m *QueryAllProofsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllProofsRequest) ProtoMessage()    {}
func (*QueryAllProofsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ddacf5456729a55, []int{12}
}
func (m *QueryAllProofsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProofsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProofsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProofsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProofsRequest.Merge(m, src)
}
func (m *QueryAllProofsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProofsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProofsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProofsRequest proto.InternalMessageInfo

type isQueryAllProofsRequest_Filter interface {
	isQueryAllProofsRequest_Filter()
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueryAllProofsRequest_SupplierAddress struct {
	SupplierAddress string `protobuf:"bytes,2,opt,name=supplier_address,json=supplierAddress,proto3,oneof" json:"supplier_address,omitempty"`
}
type QueryAllProofsRequest_SessionId struct {
	SessionId string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3,oneof" json:"session_id,omitempty"`
}
type QueryAllProofsRequest_SessionEndHeight struct {
	SessionEndHeight uint64 `protobuf:"varint,4,opt,name=session_end_height,json=sessionEndHeight,proto3,oneof" json:"session_end_height,omitempty"`
}

func (*QueryAllProofsRequest_SupplierAddress) isQueryAllProofsRequest_Filter()  {}
func (*QueryAllProofsRequest_SessionId) isQueryAllProofsRequest_Filter()        {}
func (*QueryAllProofsRequest_SessionEndHeight) isQueryAllProofsRequest_Filter() {}

func (m *QueryAllProofsRequest) GetFilter() isQueryAllProofsRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *QueryAllProofsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllProofsRequest) GetSupplierAddress() string {
	if x, ok := m.GetFilter().(*QueryAllProofsRequest_SupplierAddress); ok {
		return x.SupplierAddress
	}
	return ""
}

func (m *QueryAllProofsRequest) GetSessionId() string {
	if x, ok := m.GetFilter().(*QueryAllProofsRequest_SessionId); ok {
		return x.SessionId
	}
	return ""
}

func (m *QueryAllProofsRequest) GetSessionEndHeight() uint64 {
	if x, ok := m.GetFilter().(*QueryAllProofsRequest_SessionEndHeight); ok {
		return x.SessionEndHeight
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryAllProofsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryAllProofsRequest_SupplierAddress)(nil),
		(*QueryAllProofsRequest_SessionId)(nil),
		(*QueryAllProofsRequest_SessionEndHeight)(nil),
	}
}

type QueryAllProofsResponse struct {
	// TODO_IMPROVE: Rename to `Proofs` (plural).
	Proof      []Proof             `protobuf:"bytes,1,rep,name=proof,proto3" json:"proof"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProofsResponse) Reset()         { *m = QueryAllProofsResponse{} }
func (m *QueryAllProofsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProofsResponse) ProtoMessage()    {}
func (*QueryAllProofsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ddacf5456729a55, []int{13}
}
func (m *QueryAllProofsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProofsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProofsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProofsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProofsResponse.Merge(m, src)
}
func (m *QueryAllProofsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProofsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProofsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProofsResponse proto.InternalMessageInfo

func (m *QueryAllProofsResponse) GetProof() []Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *QueryAllProofsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "pocket.supplier.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "pocket.supplier.QueryParamsResponse")
	proto.RegisterType((*QueryGetSupplierRequest)(nil), "pocket.supplier.QueryGetSupplierRequest")
	proto.RegisterType((*QueryGetSupplierResponse)(nil), "pocket.supplier.QueryGetSupplierResponse")
	proto.RegisterType((*QueryAllSupplierRequest)(nil), "pocket.supplier.QueryAllSupplierRequest")
	proto.RegisterType((*QueryAllSupplierResponse)(nil), "pocket.supplier.QueryAllSupplierResponse")
	proto.RegisterType((*QueryGetClaimRequest)(nil), "pocket.supplier.QueryGetClaimRequest")
	proto.RegisterType((*QueryGetClaimResponse)(nil), "pocket.supplier.QueryGetClaimResponse")
	proto.RegisterType((*QueryAllClaimsRequest)(nil), "pocket.supplier.QueryAllClaimsRequest")
	proto.RegisterType((*QueryAllClaimsResponse)(nil), "pocket.supplier.QueryAllClaimsResponse")
	proto.RegisterType((*QueryGetProofRequest)(nil), "pocket.supplier.QueryGetProofRequest")
	proto.RegisterType((*QueryGetProofResponse)(nil), "pocket.supplier.QueryGetProofResponse")
	proto.RegisterType((*QueryAllProofsRequest)(nil), "pocket.supplier.QueryAllProofsRequest")
	proto.RegisterType((*QueryAllProofsResponse)(nil), "pocket.supplier.QueryAllProofsResponse")
}

func init() { proto.RegisterFile("pocket/supplier/query.proto", fileDescriptor_9ddacf5456729a55) }

var fileDescriptor_9ddacf5456729a55 = []byte{
	// 843 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x56, 0x4f, 0x4f, 0x13, 0x41,
	0x14, 0xef, 0x52, 0x28, 0x74, 0x38, 0x40, 0xc6, 0x0a, 0xa5, 0x62, 0x21, 0x8b, 0xfc, 0x51, 0xc2,
	0x6e, 0x80, 0x68, 0xf4, 0x62, 0xd2, 0x12, 0x05, 0x83, 0x07, 0x2c, 0xf1, 0xe2, 0xa5, 0xd9, 0xb6,
	0xc3, 0x76, 0xc3, 0x76, 0x67, 0xd9, 0x99, 0xaa, 0x88, 0xbd, 0x78, 0xf0, 0xe4, 0xc1, 0xc4, 0xe8,
	0xd1, 0x4f, 0xe1, 0x47, 0xf0, 0xc0, 0x91, 0xe8, 0xc5, 0x93, 0x31, 0x60, 0xe2, 0xd7, 0x30, 0x3b,
	0x7f, 0xda, 0x6e, 0xb7, 0xdb, 0x62, 0x82, 0xf1, 0xe0, 0x6d, 0x67, 0xde, 0x6f, 0xde, 0xfb, 0xbd,
	0xdf, 0xbc, 0x79, 0x6f, 0xc1, 0x15, 0x17, 0x97, 0xf7, 0x11, 0xd5, 0x49, 0xdd, 0x75, 0x6d, 0x0b,
	0x79, 0xfa, 0x41, 0x1d, 0x79, 0x87, 0x9a, 0xeb, 0x61, 0x8a, 0xe1, 0x18, 0x37, 0x6a, 0xd2, 0x98,
	0x99, 0x2a, 0x63, 0x52, 0xc3, 0xa4, 0xc8, 0xcc, 0x3a, 0x5f, 0x70, 0x6c, 0xe6, 0x06, 0x5f, 0xe9,
	0x25, 0x83, 0x20, 0xee, 0x44, 0x7f, 0xba, 0x5a, 0x42, 0xd4, 0x58, 0xd5, 0x5d, 0xc3, 0xb4, 0x1c,
	0x83, 0x5a, 0xd8, 0x11, 0xd8, 0x94, 0x89, 0x4d, 0xcc, 0x7d, 0xf8, 0x5f, 0x62, 0x77, 0xda, 0xc4,
	0xd8, 0xb4, 0x91, 0x6e, 0xb8, 0x96, 0x6e, 0x38, 0x0e, 0xa6, 0xec, 0x88, 0xf4, 0x3f, 0xdd, 0x49,
	0xd4, 0x35, 0x3c, 0xa3, 0x16, 0xb2, 0x56, 0x0d, 0x0f, 0x55, 0x9a, 0x20, 0x61, 0x0d, 0x25, 0x59,
	0xb6, 0x0d, 0xab, 0x16, 0x65, 0x74, 0x3d, 0x8c, 0xf7, 0xb8, 0x51, 0x4d, 0x01, 0xf8, 0xc8, 0xcf,
	0x65, 0x87, 0x05, 0x2b, 0xa0, 0x83, 0x3a, 0x22, 0x54, 0x7d, 0x08, 0x2e, 0x05, 0x76, 0x89, 0x8b,
	0x1d, 0x82, 0xe0, 0x4d, 0x90, 0xe0, 0xa4, 0xd2, 0xca, 0xac, 0xb2, 0x34, 0xba, 0x36, 0xa9, 0x75,
	0xe8, 0xa7, 0xf1, 0x03, 0xf9, 0xc1, 0xe3, 0xef, 0x33, 0xb1, 0x82, 0x00, 0xab, 0xeb, 0x60, 0x92,
	0x79, 0xdb, 0x44, 0x74, 0x57, 0x00, 0x45, 0x20, 0x98, 0x06, 0xc3, 0x46, 0xa5, 0xe2, 0x21, 0xc2,
	0x5d, 0x26, 0x0b, 0x72, 0xa9, 0x3e, 0x06, 0xe9, 0xf0, 0x21, 0xc1, 0xe3, 0x0e, 0x18, 0x91, 0x11,
	0x43, 0x4c, 0x98, 0x3e, 0x9a, 0x3c, 0x22, 0x98, 0x34, 0xe1, 0xaa, 0x21, 0xb8, 0xe4, 0x6c, 0xbb,
	0x93, 0xcb, 0x7d, 0x00, 0x5a, 0x17, 0x29, 0xfc, 0x2e, 0x68, 0xa2, 0x06, 0xfc, 0x5b, 0xd7, 0x78,
	0xe9, 0x88, 0x5b, 0xd7, 0x76, 0x0c, 0x13, 0x89, 0xb3, 0x85, 0xb6, 0x93, 0xea, 0x47, 0x45, 0x50,
	0x0f, 0xc4, 0xe8, 0x4a, 0x3d, 0xfe, 0x07, 0xd4, 0xe1, 0x66, 0x80, 0xdf, 0x00, 0xe3, 0xb7, 0xd8,
	0x97, 0x1f, 0x8f, 0x1b, 0x20, 0xf8, 0x02, 0xa4, 0xa4, 0xb4, 0x1b, 0x7e, 0x9d, 0x48, 0x01, 0xae,
	0x02, 0x40, 0x10, 0x21, 0x16, 0x76, 0x8a, 0x56, 0x45, 0xdc, 0x47, 0x52, 0xec, 0x3c, 0xa8, 0xc0,
	0x0d, 0x30, 0x2e, 0xb9, 0x14, 0xe5, 0xa5, 0xf9, 0x2c, 0x92, 0xf9, 0xf4, 0x97, 0x4f, 0x2b, 0x29,
	0x41, 0x24, 0xc7, 0x2d, 0xbb, 0xd4, 0xb3, 0x1c, 0xb3, 0x30, 0x26, 0x4f, 0x88, 0x6d, 0x75, 0x1b,
	0x5c, 0xee, 0x88, 0x2d, 0x84, 0x59, 0x03, 0x43, 0xac, 0x68, 0x85, 0xf0, 0x13, 0xa1, 0xd2, 0x62,
	0x70, 0x21, 0x0a, 0x87, 0xaa, 0xbf, 0x14, 0xe1, 0x2d, 0x67, 0xdb, 0xcc, 0x4c, 0x2e, 0xf8, 0x2e,
	0xe1, 0x72, 0x54, 0xce, 0x5b, 0xb1, 0x50, 0x6e, 0x70, 0x26, 0xa0, 0x5f, 0x5c, 0xc0, 0xda, 0x14,
	0xd4, 0x00, 0x94, 0x00, 0xe4, 0x54, 0x8a, 0x55, 0x64, 0x99, 0x55, 0x9a, 0x1e, 0x9c, 0x55, 0x96,
	0x06, 0xb7, 0x62, 0x85, 0x71, 0x61, 0xbb, 0xe7, 0x54, 0xb6, 0x98, 0x25, 0x3f, 0x02, 0x12, 0x7b,
	0x96, 0x4d, 0x91, 0xa7, 0xbe, 0x57, 0xc0, 0x44, 0x67, 0xa6, 0x61, 0xe1, 0xe2, 0xe7, 0x14, 0xee,
	0xaf, 0x94, 0xd2, 0x8e, 0xdf, 0x55, 0xfe, 0x51, 0x29, 0x89, 0xd8, 0x2d, 0x45, 0x58, 0x8b, 0x8b,
	0x2c, 0x25, 0x06, 0x97, 0x8a, 0x30, 0x68, 0xa0, 0x94, 0x98, 0xf9, 0xbf, 0x28, 0x25, 0x99, 0x69,
	0x58, 0xb8, 0xf8, 0x39, 0x85, 0xbb, 0xb0, 0x52, 0x5a, 0xfb, 0x3c, 0x0c, 0x86, 0x18, 0x2f, 0x48,
	0x41, 0x82, 0xcf, 0x11, 0x38, 0x17, 0x62, 0x10, 0x1e, 0x56, 0x99, 0x6b, 0xbd, 0x41, 0x3c, 0x94,
	0x3a, 0xf3, 0xea, 0xeb, 0xcf, 0x77, 0x03, 0x53, 0x70, 0x52, 0xef, 0x3e, 0x67, 0xe1, 0x1b, 0x05,
	0x8c, 0xc8, 0xde, 0x0b, 0x97, 0xba, 0xfb, 0x0c, 0x4f, 0xb0, 0xcc, 0xf5, 0x73, 0x20, 0x05, 0x85,
	0x65, 0x46, 0x61, 0x1e, 0xce, 0x85, 0x28, 0x34, 0x3f, 0x8e, 0x44, 0x65, 0x34, 0xe0, 0x6b, 0x05,
	0x8c, 0x4a, 0x0f, 0x39, 0xdb, 0x8e, 0x62, 0x14, 0x9e, 0x63, 0x51, 0x8c, 0xba, 0x4c, 0x23, 0x55,
	0x65, 0x8c, 0xa6, 0x61, 0x26, 0x92, 0x11, 0x81, 0x1f, 0x14, 0x30, 0xc4, 0x5a, 0x08, 0x9c, 0x8f,
	0x4c, 0xb5, 0x7d, 0x8c, 0x64, 0x16, 0xfa, 0xc1, 0x44, 0xf0, 0xbb, 0x2c, 0xf8, 0x6d, 0x78, 0x4b,
	0xef, 0xfa, 0xf7, 0xa2, 0x1f, 0xb5, 0x5e, 0x40, 0x43, 0x3f, 0xea, 0x7c, 0x3b, 0x0d, 0xd8, 0x00,
	0xc9, 0x66, 0x37, 0x84, 0x0b, 0x91, 0x49, 0x07, 0x06, 0x43, 0x66, 0xb1, 0x2f, 0xae, 0x6f, 0xbd,
	0x94, 0x79, 0x44, 0x5f, 0x17, 0xf6, 0x1e, 0x7a, 0xe8, 0xd2, 0xde, 0x13, 0x7b, 0xe8, 0x12, 0x68,
	0x5f, 0x3d, 0x74, 0x61, 0x2f, 0xae, 0xaf, 0x2e, 0x2f, 0x99, 0x2e, 0xfc, 0x69, 0xf7, 0xd0, 0x25,
	0xd0, 0xe5, 0x7a, 0xe8, 0x12, 0xec, 0x11, 0x6a, 0x96, 0xb1, 0x4b, 0xc3, 0x89, 0xee, 0xec, 0xf2,
	0xdb, 0xc7, 0xa7, 0x59, 0xe5, 0xe4, 0x34, 0xab, 0xfc, 0x38, 0xcd, 0x2a, 0x6f, 0xcf, 0xb2, 0xb1,
	0x93, 0xb3, 0x6c, 0xec, 0xdb, 0x59, 0x36, 0xf6, 0x64, 0xd5, 0xb4, 0x68, 0xb5, 0x5e, 0xd2, 0xca,
	0xb8, 0xa6, 0xbb, 0x78, 0x9f, 0xae, 0x38, 0x88, 0x3e, 0xc3, 0xde, 0x3e, 0x5b, 0x78, 0xd8, 0xb6,
	0xf5, 0xe7, 0x2d, 0x67, 0xf4, 0xd0, 0x45, 0xa4, 0x94, 0x60, 0x3f, 0xa9, 0xeb, 0xbf, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xec, 0x5f, 0xb9, 0xf0, 0xc5, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Supplier items.
	Supplier(ctx context.Context, in *QueryGetSupplierRequest, opts ...grpc.CallOption) (*QueryGetSupplierResponse, error)
	SupplierAll(ctx context.Context, in *QueryAllSupplierRequest, opts ...grpc.CallOption) (*QueryAllSupplierResponse, error)
	// Queries a list of Claim items.
	Claim(ctx context.Context, in *QueryGetClaimRequest, opts ...grpc.CallOption) (*QueryGetClaimResponse, error)
	AllClaims(ctx context.Context, in *QueryAllClaimsRequest, opts ...grpc.CallOption) (*QueryAllClaimsResponse, error)
	// Queries a list of Proof items.
	Proof(ctx context.Context, in *QueryGetProofRequest, opts ...grpc.CallOption) (*QueryGetProofResponse, error)
	AllProofs(ctx context.Context, in *QueryAllProofsRequest, opts ...grpc.CallOption) (*QueryAllProofsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/pocket.supplier.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Supplier(ctx context.Context, in *QueryGetSupplierRequest, opts ...grpc.CallOption) (*QueryGetSupplierResponse, error) {
	out := new(QueryGetSupplierResponse)
	err := c.cc.Invoke(ctx, "/pocket.supplier.Query/Supplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SupplierAll(ctx context.Context, in *QueryAllSupplierRequest, opts ...grpc.CallOption) (*QueryAllSupplierResponse, error) {
	out := new(QueryAllSupplierResponse)
	err := c.cc.Invoke(ctx, "/pocket.supplier.Query/SupplierAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Claim(ctx context.Context, in *QueryGetClaimRequest, opts ...grpc.CallOption) (*QueryGetClaimResponse, error) {
	out := new(QueryGetClaimResponse)
	err := c.cc.Invoke(ctx, "/pocket.supplier.Query/Claim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllClaims(ctx context.Context, in *QueryAllClaimsRequest, opts ...grpc.CallOption) (*QueryAllClaimsResponse, error) {
	out := new(QueryAllClaimsResponse)
	err := c.cc.Invoke(ctx, "/pocket.supplier.Query/AllClaims", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Proof(ctx context.Context, in *QueryGetProofRequest, opts ...grpc.CallOption) (*QueryGetProofResponse, error) {
	out := new(QueryGetProofResponse)
	err := c.cc.Invoke(ctx, "/pocket.supplier.Query/Proof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllProofs(ctx context.Context, in *QueryAllProofsRequest, opts ...grpc.CallOption) (*QueryAllProofsResponse, error) {
	out := new(QueryAllProofsResponse)
	err := c.cc.Invoke(ctx, "/pocket.supplier.Query/AllProofs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Supplier items.
	Supplier(context.Context, *QueryGetSupplierRequest) (*QueryGetSupplierResponse, error)
	SupplierAll(context.Context, *QueryAllSupplierRequest) (*QueryAllSupplierResponse, error)
	// Queries a list of Claim items.
	Claim(context.Context, *QueryGetClaimRequest) (*QueryGetClaimResponse, error)
	AllClaims(context.Context, *QueryAllClaimsRequest) (*QueryAllClaimsResponse, error)
	// Queries a list of Proof items.
	Proof(context.Context, *QueryGetProofRequest) (*QueryGetProofResponse, error)
	AllProofs(context.Context, *QueryAllProofsRequest) (*QueryAllProofsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Supplier(ctx context.Context, req *QueryGetSupplierRequest) (*QueryGetSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Supplier not implemented")
}
func (*UnimplementedQueryServer) SupplierAll(ctx context.Context, req *QueryAllSupplierRequest) (*QueryAllSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplierAll not implemented")
}
func (*UnimplementedQueryServer) Claim(ctx context.Context, req *QueryGetClaimRequest) (*QueryGetClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claim not implemented")
}
func (*UnimplementedQueryServer) AllClaims(ctx context.Context, req *QueryAllClaimsRequest) (*QueryAllClaimsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllClaims not implemented")
}
func (*UnimplementedQueryServer) Proof(ctx context.Context, req *QueryGetProofRequest) (*QueryGetProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proof not implemented")
}
func (*UnimplementedQueryServer) AllProofs(ctx context.Context, req *QueryAllProofsRequest) (*QueryAllProofsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllProofs not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pocket.supplier.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Supplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Supplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pocket.supplier.Query/Supplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Supplier(ctx, req.(*QueryGetSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SupplierAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SupplierAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pocket.supplier.Query/SupplierAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SupplierAll(ctx, req.(*QueryAllSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pocket.supplier.Query/Claim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Claim(ctx, req.(*QueryGetClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllClaims_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllClaimsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllClaims(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pocket.supplier.Query/AllClaims",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllClaims(ctx, req.(*QueryAllClaimsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Proof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Proof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pocket.supplier.Query/Proof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Proof(ctx, req.(*QueryGetProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllProofs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProofsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllProofs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pocket.supplier.Query/AllProofs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllProofs(ctx, req.(*QueryAllProofsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pocket.supplier.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Supplier",
			Handler:    _Query_Supplier_Handler,
		},
		{
			MethodName: "SupplierAll",
			Handler:    _Query_SupplierAll_Handler,
		},
		{
			MethodName: "Claim",
			Handler:    _Query_Claim_Handler,
		},
		{
			MethodName: "AllClaims",
			Handler:    _Query_AllClaims_Handler,
		},
		{
			MethodName: "Proof",
			Handler:    _Query_Proof_Handler,
		},
		{
			MethodName: "AllProofs",
			Handler:    _Query_AllProofs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pocket/supplier/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSupplierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSupplierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSupplierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSupplierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSupplierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSupplierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Supplier.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSupplierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSupplierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSupplierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSupplierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSupplierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSupplierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Supplier) > 0 {
		for iNdEx := len(m.Supplier) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Supplier[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetClaimRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClaimRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClaimRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupplierAddress) > 0 {
		i -= len(m.SupplierAddress)
		copy(dAtA[i:], m.SupplierAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SupplierAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllClaimsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClaimsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClaimsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Filter != nil {
		{
			size := m.Filter.Size()
			i -= size
			if _, err := m.Filter.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllClaimsRequest_SupplierAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClaimsRequest_SupplierAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SupplierAddress)
	copy(dAtA[i:], m.SupplierAddress)
	i = encodeVarintQuery(dAtA, i, uint64(len(m.SupplierAddress)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *QueryAllClaimsRequest_SessionId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClaimsRequest_SessionId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SessionId)
	copy(dAtA[i:], m.SessionId)
	i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionId)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *QueryAllClaimsRequest_SessionEndHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClaimsRequest_SessionEndHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintQuery(dAtA, i, uint64(m.SessionEndHeight))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *QueryAllClaimsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClaimsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClaimsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Claim) > 0 {
		for iNdEx := len(m.Claim) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Claim[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupplierAddress) > 0 {
		i -= len(m.SupplierAddress)
		copy(dAtA[i:], m.SupplierAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SupplierAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllProofsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProofsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProofsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Filter != nil {
		{
			size := m.Filter.Size()
			i -= size
			if _, err := m.Filter.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProofsRequest_SupplierAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProofsRequest_SupplierAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SupplierAddress)
	copy(dAtA[i:], m.SupplierAddress)
	i = encodeVarintQuery(dAtA, i, uint64(len(m.SupplierAddress)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *QueryAllProofsRequest_SessionId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProofsRequest_SessionId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SessionId)
	copy(dAtA[i:], m.SessionId)
	i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionId)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *QueryAllProofsRequest_SessionEndHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProofsRequest_SessionEndHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintQuery(dAtA, i, uint64(m.SessionEndHeight))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *QueryAllProofsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProofsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProofsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proof) > 0 {
		for iNdEx := len(m.Proof) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proof[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSupplierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSupplierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Supplier.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSupplierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSupplierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Supplier) > 0 {
		for _, e := range m.Supplier {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetClaimRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SupplierAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Claim.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllClaimsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Filter != nil {
		n += m.Filter.Size()
	}
	return n
}

func (m *QueryAllClaimsRequest_SupplierAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SupplierAddress)
	n += 1 + l + sovQuery(uint64(l))
	return n
}
func (m *QueryAllClaimsRequest_SessionId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionId)
	n += 1 + l + sovQuery(uint64(l))
	return n
}
func (m *QueryAllClaimsRequest_SessionEndHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQuery(uint64(m.SessionEndHeight))
	return n
}
func (m *QueryAllClaimsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Claim) > 0 {
		for _, e := range m.Claim {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SupplierAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Proof.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllProofsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Filter != nil {
		n += m.Filter.Size()
	}
	return n
}

func (m *QueryAllProofsRequest_SupplierAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SupplierAddress)
	n += 1 + l + sovQuery(uint64(l))
	return n
}
func (m *QueryAllProofsRequest_SessionId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionId)
	n += 1 + l + sovQuery(uint64(l))
	return n
}
func (m *QueryAllProofsRequest_SessionEndHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQuery(uint64(m.SessionEndHeight))
	return n
}
func (m *QueryAllProofsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Proof) > 0 {
		for _, e := range m.Proof {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSupplierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSupplierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSupplierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSupplierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSupplierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSupplierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Supplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSupplierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSupplierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSupplierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSupplierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSupplierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSupplierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Supplier = append(m.Supplier, types.Supplier{})
			if err := m.Supplier[len(m.Supplier)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClaimRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClaimRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClaimRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplierAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClaimsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClaimsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClaimsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = &QueryAllClaimsRequest_SupplierAddress{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = &QueryAllClaimsRequest_SessionId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionEndHeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Filter = &QueryAllClaimsRequest_SessionEndHeight{v}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClaimsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClaimsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClaimsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claim = append(m.Claim, Claim{})
			if err := m.Claim[len(m.Claim)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplierAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProofsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProofsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProofsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = &QueryAllProofsRequest_SupplierAddress{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = &QueryAllProofsRequest_SessionId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionEndHeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Filter = &QueryAllProofsRequest_SessionEndHeight{v}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProofsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProofsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProofsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof, Proof{})
			if err := m.Proof[len(m.Proof)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
