# TODO_CONSIDERATION: We don't need this now, but it would be beneficial if the
# logic handling this config file could be designed in such a way that it allows for
# "hot" config changes in the future, meaning changes without restarting a process.
# This would be useful for adding a proxy or a supplier without interrupting the service.
# For example, if a new supplier needs to be added, the RelayMiner could reload the
# configuration file and start serving the new supplier without any downtime.

# Name of the key (in the keyring) used to sign transactions.
# This key is used to identify the RelayMiner operator and sign any transactions
# that the RelayMiner might need to submit to the Pocket Network blockchain.
signing_key_name: supplier1

# Relative path (on the RelayMiner's machine) to where the data backing
# the Sparse Merkle Tree (SMT) Key-Value store exists on disk.
# The SMT is used to keep track of the RelayMiner's state and store any
# necessary data for its operation. This path specifies where the SMT data
# will be persisted on the RelayMiner's filesystem.
smt_store_path: smt_stores

# Prometheus exporter configuration
# Prometheus is a popular open-source monitoring and alerting system.
# The RelayMiner can expose metrics that Prometheus can scrape and use
# for monitoring the RelayMiner's health and performance.
metrics:
  # Turn the metrics exporter on/off
  enabled: true
  # The address that the metrics exporter will listen on. Can be just a port, or host:port.
  # If just a port is specified, the exporter will listen on all network interfaces.
  addr: :9090

# Configuration for connecting to a Pocket Network node
pocket_node:
  # Pocket node URL that exposes the CometBFT JSON-RPC API.
  # This can be used by the Cosmos SDK client, event subscriptions, etc.
  # If unspecified, defaults to `tx_node_rpc_url`.
  # CometBFT is the consensus engine used by the Pocket Network blockchain.
  query_node_rpc_url: tcp://poktroll-validator:36657
  # Pocket node URL that exposes the Cosmos gRPC service, dedicated to querying purposes.
  # gRPC is a high-performance, open-source framework for remote procedure calls.
  # This endpoint is used for querying data from the Pocket Network blockchain.
  query_node_grpc_url: tcp://poktroll-validator:36658
  # Pocket node URL that exposes the Tendermint RPC service.
  # Tendermint is the networking and consensus layer used by the Pocket Network blockchain.
  # This endpoint is used for broadcasting transactions to the Pocket Network.
  tx_node_rpc_url: tcp://poktroll-validator:36658

# Proxies are endpoints that expose different suppliers' services to the internet.
# They act as intermediaries between the Pocket Network and the external services
# provided by the suppliers. Proxies receive relay requests from the Pocket Network
# and forward them to the appropriate supplier service.
proxies:
  # Name of the proxy. It will be used to reference the proxy in a supplier's configuration.
  # Must be unique.
  # Required.
  # TODO_CONSIDERATION: if we enforce DNS-compliant names, it can potentially
  # become handy in the future, for example, for automatically generating DNS records.
  # More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names
  - proxy_name: http-example
    # Type of proxy: currently only http is supported but will support more
    # (https, tcp, quic, etc.) in the future.
    # MUST match the type of the supplier service.
    # Required.
    type: http
    # Hostname and port to open and listen on.
    # Use 0.0.0.0 in containerized environments to listen on all network interfaces.
    # Use 127.0.0.1 with a reverse proxy when there's another process on localhost
    # that can be used as a reverse proxy (nginx, apache, traefik, etc.).
    # Required.
    host: 127.0.0.1:8080

    # TODO_IMPROVE: https is not currently supported, but this is how it could potentially look.
    # - name: example-how-we-can-support-https
    #   type: https
    #   host: 0.0.0.0:8443
    #   tls:
    #     enabled: true
    #     certificate: /path/to/crt
    #     key: /path/to/key

# Suppliers are different services that can be offered through the RelayMiner.
# When a supplier is configured to use a proxy and staked appropriately,
# the relay requests for that service will start flowing through the RelayMiner.
suppliers:
  # The serviceId the supplier is offering on the network.
  # It must match the Service.Id of the service that has been staked for on the Pocket Network.
  # Must be unique.
  # Required.
  - service_id: ethereum
    # Type of service the supplier is offering through the network.
    # Must match the type of the proxy the supplier is connected to.
    # Required.
    type: http
    # Configuration of the service offered through the RelayMiner.
    service_config:
      # URL that the RelayMiner proxies the requests to.
      # Also known as the data node, or service node in some cases.
      # This is the actual service endpoint that the RelayMiner will forward the requests to.
      # Required.
      url: http://anvil.servicer:8545
      # Authentication for the service.
      # HTTP Basic Auth: https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication
      # If the service requires authentication, specify the username and password here.
      # Optional.
      authentication:
        username: user
        password: pwd

      # TODO_IMPROVE: This is not supported in code yet,
      # but some services authenticate via a header.
      # Example: if the service requires a header like `Authorization: Bearer <TOKEN>`
      # Optional.
      headers: {}

    # A list of hosts the proxy is accepting requests from.
    # When linked to the proxy, each host is going to be used to look up the
    # corresponding Supplier.Service in the Pocket Network.
    # Each host in the list must match a Supplier.Service.Endpoint that the Supplier
    # has advertised on-chain when staking for that Service.
    # There are various reasons for having multiple hosts for the same supplier service:
    # - The on-chain Supplier may provide the same Service on multiple domains
    #   (e.g., for different regions).
    # - The operator may want to route requests of different RPC types to
    #   the same proxy.
    # - Migrating from one domain to another. The operator could still
    #   accept requests on the old domain while the new domain is being propagated.
    # - The operator may want to have a different domain for internal requests.
    # - The on-chain Service configuration accepts multiple endpoints.
    # Must be unique within the proxy it is referenced in.
    # Required.
    hosts:
      - ethereum.devnet1.poktroll.com

      # The `service_id` of the supplier is automatically added to the hosts section
      # for potential troubleshooting/debugging purposes, such as:
      # - Having internal requests coming from non-FQDNs because of complex routing.
      # - Sending requests from k8s pods.
      # - Specifying the `host` in curl requests when testing, like `curl -H "Host: ethereum" ...`,
      #   and making the proxy server process the request without the need for an
      #   on-chain Endpoint entry.
      # - ethereum # <- this part is added automatically.

    # Names of proxies that this supplier is connected to.
    # This MUST correspond to the `proxy_name` entry in the `proxies` section
    # in order for the supplier to be available to the external network.
    # Required.
    proxy_names:
      - http-example

  - service_id: 7b-llm-model
    type: http
    service_config:
      url: http://llama-endpoint
    hosts:
      - 7b-llm-model.devnet1.poktroll.com
      # - 7b-llm-model # <- this part is added automatically.
    proxy_names:
      - http-example
