// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cosmos/cosmos-sdk/x/auth/types (interfaces: QueryClient)

// Package mockaccount is a generated GoMock package.
package mockaccount

import (
	context "context"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/x/auth/types"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockQueryClient is a mock of QueryClient interface.
type MockQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueryClientMockRecorder
}

// MockQueryClientMockRecorder is the mock recorder for MockQueryClient.
type MockQueryClientMockRecorder struct {
	mock *MockQueryClient
}

// NewMockQueryClient creates a new mock instance.
func NewMockQueryClient(ctrl *gomock.Controller) *MockQueryClient {
	mock := &MockQueryClient{ctrl: ctrl}
	mock.recorder = &MockQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryClient) EXPECT() *MockQueryClientMockRecorder {
	return m.recorder
}

// Account mocks base method.
func (m *MockQueryClient) Account(arg0 context.Context, arg1 *types.QueryAccountRequest, arg2 ...grpc.CallOption) (*types.QueryAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Account", varargs...)
	ret0, _ := ret[0].(*types.QueryAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Account indicates an expected call of Account.
func (mr *MockQueryClientMockRecorder) Account(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockQueryClient)(nil).Account), varargs...)
}

// AccountAddressByID mocks base method.
func (m *MockQueryClient) AccountAddressByID(arg0 context.Context, arg1 *types.QueryAccountAddressByIDRequest, arg2 ...grpc.CallOption) (*types.QueryAccountAddressByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountAddressByID", varargs...)
	ret0, _ := ret[0].(*types.QueryAccountAddressByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountAddressByID indicates an expected call of AccountAddressByID.
func (mr *MockQueryClientMockRecorder) AccountAddressByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountAddressByID", reflect.TypeOf((*MockQueryClient)(nil).AccountAddressByID), varargs...)
}

// AccountInfo mocks base method.
func (m *MockQueryClient) AccountInfo(arg0 context.Context, arg1 *types.QueryAccountInfoRequest, arg2 ...grpc.CallOption) (*types.QueryAccountInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountInfo", varargs...)
	ret0, _ := ret[0].(*types.QueryAccountInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInfo indicates an expected call of AccountInfo.
func (mr *MockQueryClientMockRecorder) AccountInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInfo", reflect.TypeOf((*MockQueryClient)(nil).AccountInfo), varargs...)
}

// Accounts mocks base method.
func (m *MockQueryClient) Accounts(arg0 context.Context, arg1 *types.QueryAccountsRequest, arg2 ...grpc.CallOption) (*types.QueryAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Accounts", varargs...)
	ret0, _ := ret[0].(*types.QueryAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accounts indicates an expected call of Accounts.
func (mr *MockQueryClientMockRecorder) Accounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockQueryClient)(nil).Accounts), varargs...)
}

// AddressBytesToString mocks base method.
func (m *MockQueryClient) AddressBytesToString(arg0 context.Context, arg1 *types.AddressBytesToStringRequest, arg2 ...grpc.CallOption) (*types.AddressBytesToStringResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddressBytesToString", varargs...)
	ret0, _ := ret[0].(*types.AddressBytesToStringResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddressBytesToString indicates an expected call of AddressBytesToString.
func (mr *MockQueryClientMockRecorder) AddressBytesToString(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressBytesToString", reflect.TypeOf((*MockQueryClient)(nil).AddressBytesToString), varargs...)
}

// AddressStringToBytes mocks base method.
func (m *MockQueryClient) AddressStringToBytes(arg0 context.Context, arg1 *types.AddressStringToBytesRequest, arg2 ...grpc.CallOption) (*types.AddressStringToBytesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddressStringToBytes", varargs...)
	ret0, _ := ret[0].(*types.AddressStringToBytesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddressStringToBytes indicates an expected call of AddressStringToBytes.
func (mr *MockQueryClientMockRecorder) AddressStringToBytes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressStringToBytes", reflect.TypeOf((*MockQueryClient)(nil).AddressStringToBytes), varargs...)
}

// Bech32Prefix mocks base method.
func (m *MockQueryClient) Bech32Prefix(arg0 context.Context, arg1 *types.Bech32PrefixRequest, arg2 ...grpc.CallOption) (*types.Bech32PrefixResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Bech32Prefix", varargs...)
	ret0, _ := ret[0].(*types.Bech32PrefixResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bech32Prefix indicates an expected call of Bech32Prefix.
func (mr *MockQueryClientMockRecorder) Bech32Prefix(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bech32Prefix", reflect.TypeOf((*MockQueryClient)(nil).Bech32Prefix), varargs...)
}

// ModuleAccountByName mocks base method.
func (m *MockQueryClient) ModuleAccountByName(arg0 context.Context, arg1 *types.QueryModuleAccountByNameRequest, arg2 ...grpc.CallOption) (*types.QueryModuleAccountByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModuleAccountByName", varargs...)
	ret0, _ := ret[0].(*types.QueryModuleAccountByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleAccountByName indicates an expected call of ModuleAccountByName.
func (mr *MockQueryClientMockRecorder) ModuleAccountByName(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleAccountByName", reflect.TypeOf((*MockQueryClient)(nil).ModuleAccountByName), varargs...)
}

// ModuleAccounts mocks base method.
func (m *MockQueryClient) ModuleAccounts(arg0 context.Context, arg1 *types.QueryModuleAccountsRequest, arg2 ...grpc.CallOption) (*types.QueryModuleAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModuleAccounts", varargs...)
	ret0, _ := ret[0].(*types.QueryModuleAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleAccounts indicates an expected call of ModuleAccounts.
func (mr *MockQueryClientMockRecorder) ModuleAccounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleAccounts", reflect.TypeOf((*MockQueryClient)(nil).ModuleAccounts), varargs...)
}

// Params mocks base method.
func (m *MockQueryClient) Params(arg0 context.Context, arg1 *types.QueryParamsRequest, arg2 ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Params", varargs...)
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockQueryClientMockRecorder) Params(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockQueryClient)(nil).Params), varargs...)
}
