// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pokt-network/poktroll/x/supplier/types (interfaces: QueryClient)

// Package mocksupplier is a generated GoMock package.
package mocksupplier

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/pokt-network/poktroll/x/supplier/types"
	grpc "google.golang.org/grpc"
)

// MockQueryClient is a mock of QueryClient interface.
type MockQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueryClientMockRecorder
}

// MockQueryClientMockRecorder is the mock recorder for MockQueryClient.
type MockQueryClientMockRecorder struct {
	mock *MockQueryClient
}

// NewMockQueryClient creates a new mock instance.
func NewMockQueryClient(ctrl *gomock.Controller) *MockQueryClient {
	mock := &MockQueryClient{ctrl: ctrl}
	mock.recorder = &MockQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryClient) EXPECT() *MockQueryClientMockRecorder {
	return m.recorder
}

// AllClaims mocks base method.
func (m *MockQueryClient) AllClaims(arg0 context.Context, arg1 *types.QueryAllClaimsRequest, arg2 ...grpc.CallOption) (*types.QueryAllClaimsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllClaims", varargs...)
	ret0, _ := ret[0].(*types.QueryAllClaimsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllClaims indicates an expected call of AllClaims.
func (mr *MockQueryClientMockRecorder) AllClaims(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllClaims", reflect.TypeOf((*MockQueryClient)(nil).AllClaims), varargs...)
}

// Claim mocks base method.
func (m *MockQueryClient) Claim(arg0 context.Context, arg1 *types.QueryGetClaimRequest, arg2 ...grpc.CallOption) (*types.QueryGetClaimResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Claim", varargs...)
	ret0, _ := ret[0].(*types.QueryGetClaimResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Claim indicates an expected call of Claim.
func (mr *MockQueryClientMockRecorder) Claim(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Claim", reflect.TypeOf((*MockQueryClient)(nil).Claim), varargs...)
}

// Params mocks base method.
func (m *MockQueryClient) Params(arg0 context.Context, arg1 *types.QueryParamsRequest, arg2 ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Params", varargs...)
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockQueryClientMockRecorder) Params(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockQueryClient)(nil).Params), varargs...)
}

// Supplier mocks base method.
func (m *MockQueryClient) Supplier(arg0 context.Context, arg1 *types.QueryGetSupplierRequest, arg2 ...grpc.CallOption) (*types.QueryGetSupplierResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Supplier", varargs...)
	ret0, _ := ret[0].(*types.QueryGetSupplierResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Supplier indicates an expected call of Supplier.
func (mr *MockQueryClientMockRecorder) Supplier(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Supplier", reflect.TypeOf((*MockQueryClient)(nil).Supplier), varargs...)
}

// SupplierAll mocks base method.
func (m *MockQueryClient) SupplierAll(arg0 context.Context, arg1 *types.QueryAllSupplierRequest, arg2 ...grpc.CallOption) (*types.QueryAllSupplierResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SupplierAll", varargs...)
	ret0, _ := ret[0].(*types.QueryAllSupplierResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupplierAll indicates an expected call of SupplierAll.
func (mr *MockQueryClientMockRecorder) SupplierAll(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupplierAll", reflect.TypeOf((*MockQueryClient)(nil).SupplierAll), varargs...)
}
