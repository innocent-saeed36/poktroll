// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pokt-network/poktroll/pkg/client (interfaces: SupplierQueryClient)

// Package mockclient is a generated GoMock package.
package mockclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/pokt-network/poktroll/x/shared/types"
)

// MockSupplierQueryClient is a mock of SupplierQueryClient interface.
type MockSupplierQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockSupplierQueryClientMockRecorder
}

// MockSupplierQueryClientMockRecorder is the mock recorder for MockSupplierQueryClient.
type MockSupplierQueryClientMockRecorder struct {
	mock *MockSupplierQueryClient
}

// NewMockSupplierQueryClient creates a new mock instance.
func NewMockSupplierQueryClient(ctrl *gomock.Controller) *MockSupplierQueryClient {
	mock := &MockSupplierQueryClient{ctrl: ctrl}
	mock.recorder = &MockSupplierQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupplierQueryClient) EXPECT() *MockSupplierQueryClientMockRecorder {
	return m.recorder
}

// GetSupplier mocks base method.
func (m *MockSupplierQueryClient) GetSupplier(arg0 context.Context, arg1 string) (types.Supplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupplier", arg0, arg1)
	ret0, _ := ret[0].(types.Supplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupplier indicates an expected call of GetSupplier.
func (mr *MockSupplierQueryClientMockRecorder) GetSupplier(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupplier", reflect.TypeOf((*MockSupplierQueryClient)(nil).GetSupplier), arg0, arg1)
}
