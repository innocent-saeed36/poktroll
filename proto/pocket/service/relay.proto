syntax = "proto3";
package pocket.service;

option go_package = "github.com/pokt-network/poktroll/x/service/types";

import "cosmos_proto/cosmos.proto";
import "pocket/application/application.proto";
import "pocket/session/session.proto";

// Relay contains both the RelayRequest (signed by the Application) and the RelayResponse (signed by the Supplier).
// The serialized tuple is inserted into the SMST leaves as values in the Claim/Proof lifecycle.
message Relay {
    RelayRequest req = 1;
    RelayResponse res = 2;
}

// RelayRequestMetadata contains the metadata for a RelayRequest.
message RelayRequestMetadata {
    session.SessionHeader session_header = 1; // Session header associated with the relay.
    // TODO_COMMENT(@h5law): Add link or more details to how this is related to ring signatures once implemented.
    bytes signature = 2; // The request signature. This may be the application signature, or any gateway it delegated to.
}

// RelayRequest holds the request details for a relay.
message RelayRequest {
    RelayRequestMetadata meta = 1;
    // payload is the serialised payload for the request.
    // The payload is passed directly to the service and as such can be any
    // format that the service supports: JSON-RPC, REST, gRPC, etc.
    bytes payload = 2;
}

// RelayResponse contains the response details for a RelayRequest.
message RelayResponse {
    RelayResponseMetadata meta = 1;
    // payload is the serialised payload for the response.
    // The payload is passed directly from the service and as such can be any
    // format the the service responds with: JSON-RPC, REST, gRPC, etc.
    bytes payload = 2;
}

// RelayResponseMetadata contains the metadata for a RelayResponse.
message RelayResponseMetadata {
    session.SessionHeader session_header = 1; // Session header associated with the relay.
    bytes supplier_signature = 2; // Signature of the supplier on the response.
}
