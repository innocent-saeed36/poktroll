syntax = "proto3";

package poktroll.proof;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "poktroll/proof/params.proto";
import "poktroll/session/session.proto";
import "poktroll/shared/service.proto";

option go_package = "github.com/pokt-network/poktroll/x/proof/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams (MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc CreateClaim  (MsgCreateClaim ) returns (MsgCreateClaimResponse );
  rpc SubmitProof  (MsgSubmitProof ) returns (MsgSubmitProofResponse );
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                        "authority";
  option           (amino.name) = "poktroll/x/proof/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgCreateClaim {
  option (cosmos.msg.v1.signer) = "supplier_address";
  string                         supplier_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  poktroll.session.SessionHeader session_header   = 2;

  // root returned from smt.SMST#Root()
  bytes root_hash = 3;
}

message MsgCreateClaimResponse {}

message MsgSubmitProof {
  option (cosmos.msg.v1.signer) = "supplier_address";

  string                         supplier_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  poktroll.session.SessionHeader session_header   = 2;
  // serialized version of *smt.SparseMerkleClosestProof
  bytes                          proof            = 3;
}

message MsgSubmitProofResponse {}

