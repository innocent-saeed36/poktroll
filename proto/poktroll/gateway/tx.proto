syntax = "proto3";

package poktroll.gateway;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "poktroll/gateway/params.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/pokt-network/poktroll/x/gateway/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams   (MsgUpdateParams  ) returns (MsgUpdateParamsResponse  );
  rpc StakeGateway   (MsgStakeGateway  ) returns (MsgStakeGatewayResponse  );
  rpc UnstakeGateway (MsgUnstakeGateway) returns (MsgUnstakeGatewayResponse);
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                          "authority";
  option           (amino.name) = "poktroll/x/gateway/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgStakeGateway {
  option (cosmos.msg.v1.signer) = "address";
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // The Bech32 address of the gateway
  cosmos.base.v1beta1.Coin stake = 2; // The total amount of uPOKT the gateway is staking. Must be â‰¥ to the current amount that the gateway has staked (if any)
}

message MsgStakeGatewayResponse {}

message MsgUnstakeGateway {
  option (cosmos.msg.v1.signer) = "address";
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // The Bech32 address of the gateway
}

message MsgUnstakeGatewayResponse {}

